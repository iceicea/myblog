import{_ as e,c as a,o as t,a2 as r}from"./chunks/framework.D2uMKVlW.js";const u=JSON.parse('{"title":"软链接和硬链接","description":"","frontmatter":{},"headers":[],"relativePath":"interview/everyday/20240826.md","filePath":"interview/everyday/20240826.md"}'),o={name:"interview/everyday/20240826.md"},n=r('<h1 id="软链接和硬链接" tabindex="-1">软链接和硬链接 <a class="header-anchor" href="#软链接和硬链接" aria-label="Permalink to &quot;软链接和硬链接&quot;">​</a></h1><p><a href="https://blog.csdn.net/Giyomwd/article/details/104143426" target="_blank" rel="noreferrer">软链接与硬链接 详细讲解</a><a href="https://juejin.cn/post/6844903438560526343?searchId=20240826231921BC34C4C2750D99ACA13C" target="_blank" rel="noreferrer">5 分钟让你明白 “软链接” 和“硬链接”的区别</a></p><h2 id="链接的作用" tabindex="-1">链接的作用 <a class="header-anchor" href="#链接的作用" aria-label="Permalink to &quot;链接的作用&quot;">​</a></h2><p>为<strong>解决文件的共享使用</strong>，Linux 系统引入了两种链接：<strong>硬链接 (hard link)</strong> 与<strong>软链接</strong>（又称<strong>符号链接</strong>，即 <strong>soft link</strong> 或 <strong>symbolic link</strong>）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。</p><h2 id="软链接和硬链接的区别" tabindex="-1">软链接和硬链接的区别 <a class="header-anchor" href="#软链接和硬链接的区别" aria-label="Permalink to &quot;软链接和硬链接的区别&quot;">​</a></h2><p>从使用的角度讲，两者没有任何区别，都与正常的文件访问方式一样，支持读写，如果是可执行文件的话也可以直接执行。区别在底层的原理上。 <img src="https://raw.githubusercontent.com/iceicea/MyPic/master/blog/202408262340908.png" alt=""></p><h2 id="硬链接" tabindex="-1">硬链接 <a class="header-anchor" href="#硬链接" aria-label="Permalink to &quot;硬链接&quot;">​</a></h2><p>由于 linux 下的文件是通过索引节点（Inode）来识别文件，硬链接可以认为是一个指针，指向文件索引节点的指针，系统并不为它重新分配 inode。每添加一个一个硬链接，文件的链接数就加 1,硬连接之间没有主次之分，删除某个硬链接，只是将其从目录的数据块中删除相关信息，并且文件链接数减一。不会从 inode 表中删除 inode,除非只剩下一个链接数。</p><p><strong>存在问题</strong>:</p><ol><li>无法跨分区，跨设备创建硬链接</li><li>无法创建文件夹的硬链接</li></ol><h2 id="软链接" tabindex="-1">软链接 <a class="header-anchor" href="#软链接" aria-label="Permalink to &quot;软链接&quot;">​</a></h2><p>相当于我们 Windows 中的快捷方式，即如果你软链接一个目录，只是一个目录的快捷方式到指定位置，操作系统找这个快捷方式会直接找到真实目录下的文件。软连接与原文件并不是同一 inode,软链接的 inode 指向的数据块保存的是原文件的路径，如果没有路径，是由文件名，默认会在软链接所在路径查找</p>',12),i=[n];function s(l,d,c,h,_,p){return t(),a("div",null,i)}const m=e(o,[["render",s]]);export{u as __pageData,m as default};
