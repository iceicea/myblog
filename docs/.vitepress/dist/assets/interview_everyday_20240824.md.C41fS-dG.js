import{_ as e,c as r,o as a,a2 as t}from"./chunks/framework.D2uMKVlW.js";const f=JSON.parse('{"title":"什么是 Fiber?诞生背景是什么","description":"","frontmatter":{},"headers":[],"relativePath":"interview/everyday/20240824.md","filePath":"interview/everyday/20240824.md"}'),i={name:"interview/everyday/20240824.md"},o=t('<h1 id="什么是-fiber-诞生背景是什么" tabindex="-1">什么是 Fiber?诞生背景是什么 <a class="header-anchor" href="#什么是-fiber-诞生背景是什么" aria-label="Permalink to &quot;什么是 Fiber?诞生背景是什么&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在 Fiber 之前，React 使用的协调算法有一个主要的限制，即一旦开始渲染，就必须同步完成整个组件树的渲染。这意味着 React 无法中断工作以确保主线程的响应性。对于大型应用或复杂界面更新，这可能导致主线程阻塞，从而影响到动画的流畅度、输入响应等。 为了解决这些问题，React 团队重新设计了协调算法，引入了 Fiber。</p><h2 id="关键特性" tabindex="-1">关键特性 <a class="header-anchor" href="#关键特性" aria-label="Permalink to &quot;关键特性&quot;">​</a></h2><ol><li><p><strong>增量渲染</strong></p></li><li><p><strong>任务可中断</strong><br> Fiber 架构允许 React 暂停正在进行的工作，先执行更高优先级的工作，然后再回来完成之前的工作。这使得 React 可以保持应用的响应性，即使在大量更新发生时也是如此。</p></li><li><p><strong>错误处理</strong><br> Fiber 引入了一种新的错误边界（error boundaries）概念，这让组件能够捕获子组件树中的 JavaScript 错误，记录这些错误，并显示备用 UI。</p></li><li><p><strong>更好的优先级管理</strong></p></li><li><p><strong>新的生命周期</strong><br> 为了适应 Fiber 架构，React 引入了新的生命周期方法（如 getDerivedStateFromProps），这些方法适用于新的渲染策略。</p></li></ol>',5),n=[o];function s(l,c,_,d,p,h){return a(),r("div",null,n)}const m=e(i,[["render",s]]);export{f as __pageData,m as default};
